175. Combine Two Tables

	SELECT P.FIRSTNAME, P.LASTNAME, A.CITY, A.STATE
	FROM PERSON P
	LEFT JOIN ADDRESS A ON A.PERSONID = P.PERSONID;


176. Second Highest Salary

	SELECT
      IFNULL((SELECT DISTINCT Salary
       	  FROM Employee
       	  ORDER BY Salary DESC
      	  LIMIT 1 OFFSET 1), NULL) AS SecondHighestSalary


177. Nth Highest Salary

	CREATE FUNCTION getNthHighestSalary(N IN NUMBER) RETURN NUMBER IS
	result NUMBER;
   	BEGIN
    		select distinct x.salary
    		into result
    		from (select id, salary, dense_rank() over (order by salary desc) as nth_salary
       	      from employee) x
    		where x.nth_salary = n;
	RETURN result;

	exception
	when no_data_found
	then
    	return null;
	END;


178. Rank Scores

	select score, dense_rank() over (order by score desc) as rank
	from scores;


180. Consecutive Numbers
	
	SELECT DISTINCT l1.Num AS ConsecutiveNums
	FROM Logs l1,
    	     Logs l2,
   	     Logs l3
	WHERE l1.Id = l2.Id - 1
            AND l2.Id = l3.Id - 1
            AND l1.Num = l2.Num
            AND l2.Num = l3.Num;


181. Employees Earning More Than Their Managers

	SELECT E.NAME AS EMPLOYEE
	FROM EMPLOYEE E
	LEFT JOIN EMPLOYEE M ON E.MANAGERID = M.ID
	WHERE E.SALARY > M.SALARY;


182. Duplicate Emails

	SELECT EMAIL
	FROM PERSON
	GROUP BY EMAIL
	HAVING COUNT(1) > 1;


183. Customers Who Never Order

	SELECT NAME AS CUSTOMERS
	FROM CUSTOMERS
	WHERE CUSTOMERS.ID NOT IN ( SELECT CUSTOMERID FROM ORDERS );


184. Department Highest Salary

	select d.name as Department, e.name as Employee, e.salary as Salary
	from employee e
	join department d on e.departmentId = d.id
	where (e.departmentId, e.salary) in ( select departmentId, max(salary)
	  						  from employee
	   						  group by departmentId );


185. Department Top Three Salaries

	select Department, Employee, Salary 
	from (select d.name as Department, e.name as Employee, e.salary as Salary,
		dense_rank() over (partition by e.departmentId order by e.salary desc) as rank 
		from employee e
		join department d on e.departmentId = d.id) x
	where x.rank <= 3;


196. Delete Duplicate Emails

	DELETE p1 
	FROM Person p1, Person p2
	WHERE p1.Email = p2.Email AND p1.Id > p2.Id;


197. Rising Temperature

	SELECT weather.id AS 'Id'
	FROM weather
      JOIN weather w ON DATEDIFF(weather.recordDate, w.recordDate) = 1 AND weather.Temperature > w.Temperature;


262. Trips and Users

	with data as 
			( select status, request_at
  			  from Trips t
 			  where to_date(t.request_at, 'yyyy-mm-dd') between to_date('2013-10-01', 'yyyy-mm-dd') and to_date('2013-10-03', 'yyyy-mm-dd') 
  			  and exists (select * from users u where u.banned = 'No' and u.users_id = t.client_id)
 			  and exists (select * from users u where u.banned = 'No' and u.users_id = t.driver_id) ),

	total_rides as
   			 ( select request_at, count(1) as total_rides 
			   from data
     			   group by request_at ),

	cancelled_rides as 
   			 ( select request_at, count(1) as cancelled_rides 
			   from data
    			   where data.status in ('cancelled_by_driver', 'cancelled_by_client')
    			   group by request_at )
     
      select tr.request_at as Day, round((coalesce(cr.cancelled_rides, 0) / tr.total_rides) , 2) as "Cancellation Rate"
	from total_rides tr
	left join cancelled_rides cr on tr.request_at = cr.request_at
	order by tr.request_at;


595. Big Countries

	SELECT NAME, POPULATION, AREA
	FROM WORLD
	WHERE POPULATION >= 25000000 OR AREA >= 3000000;


596. Classes More Than 5 Students

	SELECT CLASS
	FROM COURSES
	GROUP BY CLASS
	HAVING COUNT(1) >= 5;


601. Human Traffic of Stadium

	with temp as 
			( select *, id - (row_number() over(order by id)) as diff
			  from Stadium
			  where people >= 100 ),

	temp2 as 
		  ( select id, visit_date, people, count(1) over (partition by diff) as days
		    from temp )

	select id, visit_date, people 
	from temp2 
	where days >= 3;


620. Not Boring Movies

	SELECT *
	FROM CINEMA
	WHERE MOD(ID,2) = 1 AND DESCRIPTION != 'boring'
	ORDER BY RATING DESC;


626. Exchange Seats

	select id, 
	case when mod(id,2) = 0 then lag(student) over(order by id)
     	     else lead(student, 1, student) over(order by id)
           end as student
	from seat
 	order by id;


627. Swap Salary

	update salary
	set sex = case sex 
		    when 'M' then 'F'
		    else 'M'
		    end;


1179. Reformat Department Table

	select * from 
	( select id as "id", revenue, month from Department )
	pivot
	(
  	 sum(revenue)
    	 for month in
       		('Jan' as "Jan_Revenue",
	 		 'Feb' as "Feb_Revenue",
	 		 'Mar' as "Mar_Revenue",
	 		 'Apr' as "Apr_Revenue",
	 		 'May' as "May_Revenue",
	 		 'Jun' as "Jun_Revenue",
	 		 'Jul' as "Jul_Revenue",
	 		 'Aug' as "Aug_Revenue",
	 		 'Sep' as "Sep_Revenue",
	 		 'Oct' as "Oct_Revenue",
	 		 'Nov' as "Nov_Revenue",
	 		 'Dec' as "Dec_Revenue" )
       ) ;














